<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="Flights_Flow-test" doc:id="cd1fb37e-a237-45c1-bcd9-cb5424dc4898" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get All Flights" doc:id="0c80be98-ba51-4eda-80e6-ed86a0aa36b0" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b5674212-258c-4433-8f77-f95f6ca3dd6e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsFlowtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3322c2fd-7305-413b-a4e0-424d4ad78772" >
				<munit:payload value="#[readUrl('classpath://FlightsFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="4fdfd0de-ba0a-40ac-b450-700114a7a5dd" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b5e3dc9b-ad58-41ce-950c-6b51993a0537" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Flow-test1" doc:id="255ae983-32b3-4292-9890-597607eb2405" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GetFlightByID" doc:id="05d169d1-6096-4621-a588-aff2256caef3" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d116f729-4399-4c83-a121-d21934af9fe9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsFlowtest1\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowtest1\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtest1\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="49e470b7-8b31-4c03-a328-6d4668fde267" >
				<munit:payload value="#[readUrl('classpath://FlightsFlowtest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowtest1\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtest1\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="77007ff8-cfa2-4c87-85c9-e431002ee6bb" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3c32c58b-8e93-4af6-add3-54dfdd874f44" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Flow-test-IdNotFound" doc:id="51523fd5-7b7a-4a20-8dad-143908d62591" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GetFlightByID" doc:id="ee31f4dd-601a-49ab-9d70-aa9f787cc2a7" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d116f729-4399-4c83-a121-d21934af9fe9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsFlowtestIdNotFound\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowtestIdNotFound\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtestIdNotFound\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="601fdf95-8785-4d1b-b009-92d28183e0e4" >
				<munit:payload value="#[readUrl('classpath://FlightsFlowtestIdNotFound\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowtestIdNotFound\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowtestIdNotFound\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="05015abf-a93f-4fe6-b230-406764fa69bd" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="5e9af930-5c2f-4d07-a272-ba9ee8112ac1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowtestIdNotFound::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="e61c88ff-c500-4799-bdad-8004fc89a870" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="48bb2599-6e00-40fc-a328-a5240ac00efe" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Flow-AddFlight" doc:id="32349e83-944d-4c1b-84ce-8ddbbe62a53c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Add Flight" doc:id="1ac2b8a8-2351-4561-a85d-c7d0d5caa43e" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2ca6e621-675d-4998-a36b-dc3baee91f63" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsFlowAddFlight\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowAddFlight\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowAddFlight\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="dc14ed81-779c-4ace-bd8e-69b7f85b8577" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsFlowAddFlight\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowAddFlight\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowAddFlight\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="71a203f5-d077-4456-b5d1-1a24bdce3620" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f6cb7a2c-24e4-4d76-a481-170c617b2e6f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowAddFlight::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Flow-PATCH" doc:id="4af1e7ad-efe8-48d6-a062-f5ac57942e77" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Patch Flight" doc:id="51126989-01d5-4b89-b2c0-f064b8d67f34" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e05a1902-9c85-41ad-a111-f3c3003e57f4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://FlightsFlowPATCH\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowPATCH\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowPATCH\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="b725dd31-a6d4-4133-9579-31e073847c02" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsFlowPATCH\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowPATCH\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowPATCH\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="da54cfc0-23cc-40a1-b22d-f8c0902d1a44" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ac6e17e9-7a83-4b07-9c89-4e3b54242015" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowPATCH::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Flow-DELETE" doc:id="cc91ec1f-b7c7-4877-b163-5a5301f5e70d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Delete Flight " doc:id="9d16215c-18a3-45be-b76b-4561259a61ee" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="62d22e80-480f-44cf-8fb0-9cd4375a3936" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsFlowDELETE\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsFlowDELETE\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowDELETE\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="799ac3f1-0ce4-48b3-9236-b1c500c0e395" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsFlowDELETE\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsFlowDELETE\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsFlowDELETE\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Flow" doc:id="a7bf6aa5-6b3a-4289-a85e-277ddb89bd5d" name="Flights_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c57070fe-f0bb-42fd-b5d9-af30aba64723" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsFlowDELETE::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-GETBooking" doc:id="cfff9955-d3f5-445f-b275-ceff6d671c8e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get All Bookings" doc:id="c55d87be-13ed-4b1b-8651-a72bbe32b5f4" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a4cbf059-eeac-4f37-9ab7-fdde9412638f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowGETBooking\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowGETBooking\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowGETBooking\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7b355b64-2109-41e1-bcc0-5152f23ae4a3" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowGETBooking\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowGETBooking\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowGETBooking\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="85dabf59-23c3-4414-8946-1ec5a26f456e" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="06f4c9ca-c997-4af8-b424-7d5d0d3dca2b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowGETBooking::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-getbyID" doc:id="9a79afe3-23c3-4469-8c5e-7f5c66c1b8f4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GetBookingByID" doc:id="127c3022-edb1-4467-87e8-65035b2072f2" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5145a08f-6437-4a79-974c-fb9ba02b76f6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowgetbyID\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowgetbyID\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowgetbyID\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7f2a2567-2ab9-4805-b04b-61024f4d3f51" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowgetbyID\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowgetbyID\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowgetbyID\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="72702f93-f872-4ca0-a99f-f7aad3640c73" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="73fa4a90-fb40-4b4f-b298-a96c46a83acb" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowgetbyID::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-getByID_NoData" doc:id="341a9a9b-8a4a-4be5-bbd2-ef5824b2f749" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GetBookingByID" doc:id="3f59ae8d-b2dd-4a30-a240-c11d30e8d03b" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="5145a08f-6437-4a79-974c-fb9ba02b76f6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowgetByIDNoData\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowgetByIDNoData\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowgetByIDNoData\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="54e9a41e-b5d1-4a3e-9d1d-4eae0dc71f84" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowgetByIDNoData\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowgetByIDNoData\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowgetByIDNoData\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="e39e1048-efa9-459f-aaaf-c109455c56ed" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6780bc8f-c02c-4f81-930a-51542d3075b7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowgetByIDNoData::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="32543424-e7ca-4585-a5b8-681d4556586e" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="c543320b-2c7d-4eab-b093-c69866ec3c4e" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-Post_Booking" doc:id="2fa95750-d977-4aee-a520-c7df4b42bdae" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Add Booking" doc:id="c2969ac7-6e85-4632-ae40-29d083df70b1" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="585e79cf-e349-4b75-afc3-125f0c55815b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowPostBooking\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowPostBooking\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowPostBooking\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="279aca22-ac92-4071-8065-2eb064a13f18" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowPostBooking\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowPostBooking\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowPostBooking\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="42164f02-bf98-48c4-99f1-43956cb14c94" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c14177b5-5a97-4631-b153-f8b85ebcb521" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowPostBooking::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-Patch" doc:id="6f4ce5cd-6308-4351-bf5a-78ee28fec0c4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Modify Booking By ID" doc:id="4f98d7e5-4487-4bc9-900f-f015225b58bf" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="729f086a-c431-462d-a82e-fe5abbbe8520" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://FlightsBookingFlowPatch\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowPatch\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowPatch\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="b4efec8d-e41f-4560-bce7-2bc5037ecdae" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowPatch\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowPatch\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowPatch\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="099a67e3-a976-484e-ae1d-3976b8d6703e" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c27c5bbd-23bd-4348-9bd5-2533cda57164" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowPatch::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Booking_Flow-Delete" doc:id="99a537ac-e534-4c13-8ff5-aeeeb3e97818" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Delete Booking by ID" doc:id="3a48b0df-5eb1-4e6c-a621-c91522f043cf" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a27688cf-24d9-42cc-bc2d-20da19d50629" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowDelete\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsBookingFlowDelete\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowDelete\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="05edebaa-00ac-42e5-be8d-dcda06071dc4" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsBookingFlowDelete\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsBookingFlowDelete\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsBookingFlowDelete\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Booking_Flow" doc:id="42dc2826-9b54-491d-86e8-870052bce66c" name="Flights_Booking_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a0fc966b-1246-493e-81ed-83c3d2534e3d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsBookingFlowDelete::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Partner_Flow-GetAllPartners" doc:id="3d788675-bba2-4178-8795-f9017bb781a9" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Get All Partners" doc:id="1e42c0a4-bfa2-4a56-8158-f1a2a475500c" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="262e24a3-32d2-41ae-89a1-4d62e7ed99b1" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsPartnerFlowGetAllPartners\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsPartnerFlowGetAllPartners\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsPartnerFlowGetAllPartners\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="103bb470-93d1-4471-a2a3-ded44459cd9d" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsPartnerFlowGetAllPartners\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsPartnerFlowGetAllPartners\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsPartnerFlowGetAllPartners\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Partner_Flow" doc:id="0555dd08-e46c-4d81-889b-dc70b47e1b70" name="Flights_Partner_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="01cd462a-fdac-48cb-8409-36fd9724e36f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsPartnerFlowGetAllPartners::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="Flights_Partner_Flow-PartnerByID" doc:id="de33cc37-2d97-45ef-a493-2ab529b1133d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GetFlightPartnersByID" doc:id="8ae5314d-0fa2-4e80-a704-faed55d8a9c0" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7d869680-e29f-48b8-8535-f30f0b78777a" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://FlightsPartnerFlowPartnerByID\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://FlightsPartnerFlowPartnerByID\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsPartnerFlowPartnerByID\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="9defb3c3-c956-40bb-83c2-6930178f4dc9" >
				<munit:payload value="#[output application/json --- readUrl('classpath://FlightsPartnerFlowPartnerByID\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://FlightsPartnerFlowPartnerByID\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://FlightsPartnerFlowPartnerByID\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to Flights_Partner_Flow" doc:id="06430685-85ba-451d-b119-1f64fed73eac" name="Flights_Partner_Flow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b0cf4b58-1dbb-4a7e-8f1d-3e80ac9897c1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import FlightsPartnerFlowPartnerByID::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
